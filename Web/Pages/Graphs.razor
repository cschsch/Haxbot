@page "/graphs"
@using Haxbot.Entities
@using Haxbot.Extensions
@using Haxbot.Stats
@using Web.Data
@inject GamesService GamesService
@inject INotificationService NotificationService

<PageTitle>Graphs</PageTitle>

<Heading Size="HeadingSize.Is1">Graphs</Heading>

<Paragraph>Use this to filter previously played games and to display various stats taken from them in graphs.</Paragraph>

<StatQueryFilter 
    QueryModel="QueryModel"
    OnSearch="@((groupings) => NotificationService?.Info("Searching for games...")!.ContinueWith(_ => GetGames(groupings))!)" />

<Divider />

<Tabs @bind-SelectedTab="_selectedMainTab">
    <Items>
        <Tab Name="cumulative">Cumulative</Tab>
        <Tab Name="absolute">Absolute</Tab>
        <Tab Name="relative">Relative</Tab>
    </Items>
    <Content>
        <TabPanel Name="cumulative">
            <Tabs Margin="Margin.Is1.FromTop" @bind-SelectedTab="_selectedSubTabs[0]">
                <Items>
                    <Tab Name="winrate">Winrate</Tab>
                    <Tab Name="amountPlayed">Amount played</Tab>
                    <Tab Name="amountWon">Amount won</Tab>
                    <Tab Name="amountLost">Amount lost</Tab>
                </Items>
                <Content>
                    <TabPanel Name="winrate">
                        <LineChart @ref="_lineCharts[0]" TItem="FlattenedGameStats" Options="@(CreateOptions<LineChartOptions>(nameof(FlattenedGameStats.Date), nameof(FlattenedGameStats.Winrate), "Winrate (in %)", true))" />
                    </TabPanel>
                    <TabPanel Name="amountPlayed">
                        <LineChart @ref="_lineCharts[1]" TItem="FlattenedGameStats" Options="@(CreateOptions<LineChartOptions>(nameof(FlattenedGameStats.Date), nameof(FlattenedGameStats.AmountPlayed), "Amount played", true))" />
                    </TabPanel>
                    <TabPanel Name="amountWon">
                        <LineChart @ref="_lineCharts[2]" TItem="FlattenedGameStats" Options="@(CreateOptions<LineChartOptions>(nameof(FlattenedGameStats.Date), nameof(FlattenedGameStats.AmountWon), "Amount won", true))" />
                    </TabPanel>
                    <TabPanel Name="amountLost">
                        <LineChart @ref="_lineCharts[3]" TItem="FlattenedGameStats" Options="@(CreateOptions<LineChartOptions>(nameof(FlattenedGameStats.Date), nameof(FlattenedGameStats.AmountLost), "Amount lost", true))" />
                    </TabPanel>
                </Content>
            </Tabs>
        </TabPanel>
        <TabPanel Name="absolute">
            <Tabs Margin="Margin.Is1.FromTop" @bind-SelectedTab="_selectedSubTabs[1]">
                <Items>
                    <Tab Name="winrate">Winrate</Tab>
                    <Tab Name="amountPlayed">Amount played</Tab>
                    <Tab Name="amountWon">Amount won</Tab>
                    <Tab Name="amountLost">Amount lost</Tab>
                </Items>
                <Content>
                    <TabPanel Name="winrate">
                        <BarChart @ref="_barCharts[0]" TItem="FlattenedGameStats" Options="@(CreateOptions<BarChartOptions>(nameof(FlattenedGameStats.Identification), nameof(FlattenedGameStats.Winrate), "Winrate (in %)"))" />
                    </TabPanel>
                    <TabPanel Name="amountPlayed">
                        <BarChart @ref="_barCharts[1]" TItem="FlattenedGameStats" Options="@(CreateOptions<BarChartOptions>(nameof(FlattenedGameStats.Identification), nameof(FlattenedGameStats.AmountPlayed), "Amount played"))" />
                    </TabPanel>
                    <TabPanel Name="amountWon">
                        <BarChart @ref="_barCharts[2]" TItem="FlattenedGameStats" Options="@(CreateOptions<BarChartOptions>(nameof(FlattenedGameStats.Identification), nameof(FlattenedGameStats.AmountWon), "Amount won"))" />
                    </TabPanel>
                    <TabPanel Name="amountLost">
                        <BarChart @ref="_barCharts[3]" TItem="FlattenedGameStats" Options="@(CreateOptions<BarChartOptions>(nameof(FlattenedGameStats.Identification), nameof(FlattenedGameStats.AmountLost), "Amount lost"))" />
                    </TabPanel>
                </Content>
            </Tabs>
        </TabPanel>
        <TabPanel Name="relative">
            <Tabs Margin="Margin.Is1.FromTop" @bind-SelectedTab="_selectedSubTabs[2]">
                <Items>
                    <Tab Name="winrate">Winrate</Tab>
                    <Tab Name="amountPlayed">Amount played</Tab>
                    <Tab Name="amountWon">Amount won</Tab>
                    <Tab Name="amountLost">Amount lost</Tab>
                </Items>
                <Content>
                    <TabPanel Name="winrate">
                        <PieChart @ref="_pieCharts[0].Chart" TItem="decimal" Options="@(CreateOptions<PieChartOptions>(nameof(FlattenedGameStats.Identification), nameof(FlattenedGameStats.Winrate), "Winrate (in %)"))" />
                    </TabPanel>
                    <TabPanel Name="amountPlayed">
                        <PieChart @ref="_pieCharts[1].Chart" TItem="decimal" Options="@(CreateOptions<PieChartOptions>(nameof(FlattenedGameStats.Identification), nameof(FlattenedGameStats.AmountPlayed), "Amount played"))" />
                    </TabPanel>
                    <TabPanel Name="amountWon">
                        <PieChart @ref="_pieCharts[2].Chart" TItem="decimal" Options="@(CreateOptions<PieChartOptions>(nameof(FlattenedGameStats.Identification), nameof(FlattenedGameStats.AmountWon), "Amount won"))" />
                    </TabPanel>
                    <TabPanel Name="amountLost">
                        <PieChart @ref="_pieCharts[3].Chart" TItem="decimal" Options="@(CreateOptions<PieChartOptions>(nameof(FlattenedGameStats.Identification), nameof(FlattenedGameStats.AmountLost), "Amount lost"))" />
                    </TabPanel>
                </Content>
            </Tabs>
        </TabPanel>
    </Content>
</Tabs>

@code {
    private StatQueryModel QueryModel { get; } = new() 
    { 
        PossibleGroupings = GroupingHelper.ResultGroupings
    };
    private FlattenedGameStats[] _stats = Array.Empty<FlattenedGameStats>();
    private string _selectedMainTab = "cumulative";
    private List<string> _selectedSubTabs = new List<string>
    {
        "winrate",
        "winrate",
        "winrate"
    };

    private List<LineChart<FlattenedGameStats>> _lineCharts = new List<LineChart<FlattenedGameStats>>
    {
        new(),
        new(),
        new(),
        new()
    };

    private List<BarChart<FlattenedGameStats>> _barCharts = new List<BarChart<FlattenedGameStats>>
    {
        new(),
        new(),
        new(),
        new()
    };

    private record PieChartWithSelector
    {
        public PieChart<decimal> Chart { get; set; }
        public Func<FlattenedGameStats, decimal> Selector { get; }

        public PieChartWithSelector(PieChart<decimal> chart, Func<FlattenedGameStats, decimal> selector)
        {
            Chart = chart;
            Selector = selector;
        }
    }

    private List<PieChartWithSelector> _pieCharts = new List<PieChartWithSelector>
    {
        new(new(), stats => stats.Winrate),
        new(new(), stats => stats.AmountPlayed),
        new(new(), stats => stats.AmountWon),
        new(new(), stats => stats.AmountLost)
    };

    private TChartOptions CreateOptions<TChartOptions>(string xAxisKey, string yAxisKey, string yAxisName, bool timeSeries = false)
        where TChartOptions : ChartOptions, new()
    {
        var options = new TChartOptions()
        {
            Parsing = new ChartParsing
            {
                XAxisKey = xAxisKey.ToCamelCase(),
                YAxisKey = yAxisKey.ToCamelCase()
            },
            Scales = new ChartScales
            {
                Y = new ChartAxis
                {
                    Title = new ChartScaleTitle
                    {
                        Display = true,
                        Text = yAxisName
                    }
                }
            }
        };
        if (timeSeries)
        {
            options.Scales.X = new ChartAxis
            {
                Type = "timeseries"
            };
        }
        return options;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RedrawCharts();
        }
    }

    private List<string> _chartColors = new List<string>
    {
        ChartColor.FromRgba( 0, 0, 128, 1f ), // navy
        ChartColor.FromRgba( 220, 20, 60, 1f ), // crimson
        ChartColor.FromRgba( 128, 128, 0, 1f ), // olive
        ChartColor.FromRgba( 0, 139, 139, 1f ), // darkcyan
        ChartColor.FromRgba( 139, 0, 139, 1f ), // darkmagenta
        ChartColor.FromRgba( 47, 79, 79, 1f ),  // darkslategray
        ChartColor.FromRgba( 255, 105, 180, 1f ), // hotpink
        ChartColor.FromRgba( 127, 255, 212, 1f ), // aquamarine
        ChartColor.FromRgba( 0, 100, 0, 1f ), // darkgreen
        ChartColor.FromRgba( 255, 215, 0, 1f ) // gold
    };

    private Task RedrawCharts()
    {
        return Task.WhenAll(RedrawLineCharts(), RedrawBarCharts(), RedrawPieCharts());
    }

    private async Task RedrawLineCharts()
    {
        var datasets = _stats
            .GroupBy(stat => stat.Identification)
            .Zip(_chartColors.Cycle())
            .Select(groupColors => new LineChartDataset<FlattenedGameStats>
                {
                    Label = groupColors.First.Key,
                    Data = groupColors.First.OrderBy(stat => stat.Date).Scan((acc, cur) => acc.Add(cur)).ToList(),
                    BackgroundColor = groupColors.Second,
                    BorderColor = groupColors.Second,
                    BorderWidth = 2,
                    CubicInterpolationMode = "default",
                    Fill = false
                }).ToArray();

        foreach (var chart in _lineCharts)
        {
            await chart.Clear();
            await chart.AddDatasetsAndUpdate(datasets);
        }
    }

    private async Task RedrawBarCharts()
    {
        var datasets = _stats
            .GroupBy(stat => stat.Identification)
            .Select(group => group.Aggregate((acc, cur) => acc.Add(cur)))
            .Zip(_chartColors.Cycle())
            .Select(statColors => new BarChartDataset<FlattenedGameStats>
                {
                    Label = statColors.First.Identification,
                    Data = new List<FlattenedGameStats> { statColors.First },
                    BackgroundColor = statColors.Second,
                    BorderColor = statColors.Second,
                    BorderWidth = 2
                }).ToArray();

        foreach (var chart in _barCharts)
        {
            await chart.Clear();
            await chart.AddDatasetsAndUpdate(datasets);
        }
    }

    private async Task RedrawPieCharts()
    {
        var byIdentification = _stats.GroupBy(stat => stat.Identification).ToArray();
        var names = byIdentification.Select(group => group.Key).ToArray();
        var values = byIdentification.Select(group => group.Aggregate((acc, cur) => acc.Add(cur))).ToArray();

        foreach (var chartWithSelector in _pieCharts)
        {
            await chartWithSelector.Chart.Clear();
            var data = values.Select(chartWithSelector.Selector).ToList();
            var dataset = new PieChartDataset<decimal>()
                {
                    Data = data,
                    BackgroundColor = _chartColors
                };
            await chartWithSelector.Chart.AddLabelsDatasetsAndUpdate(names, dataset);
        }
    }

    private async Task GetGames(IEnumerable<Grouping> groupings)
    {
        var games = GamesService.GetGames(QueryModel);
        if (!games.Any()) await NotificationService?.Warning("Try changing your search criteria.", "No games found!")!;
        var collector = GroupingHelper.GetCollector(groupings.Prepend(Grouping.Day).ToArray());
        _stats = GamesService.CollectStats(collector, games).ToArray();
        await RedrawCharts();
    }
}