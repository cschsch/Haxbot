@page "/games"

<PageTitle>Games</PageTitle>

@using Haxbot.Entities
@using Web.Data
@inject IJSRuntime JS
@inject GamesService GamesService
@inject INotificationService NotificationService

<Heading Size="HeadingSize.Is1">Games</Heading>

<Paragraph>Use this to filter previously played games and to save their replays.</Paragraph>

<Row Gutter="(32, 16)">
    <Column Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <PlayerFilter QueryModel="QueryModel" />
    </Column>
    <Column Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <TimeFilter QueryModel="QueryModel" />
    </Column>
</Row>
<Row Gutter="(32, 16)" Margin="Margin.Is1.FromTop">
    <Column Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <MiscFilter WithUndecided QueryModel="QueryModel" />
    </Column>
    <Column Margin="Margin.Is1" >
        <Button Size="Size.Large" Position="Position.Absolute.Bottom.Is0.End.Is0" Clicked="@(() => NotificationService?.Info("Searching for games...")!.ContinueWith(_ => GetGames())!)" Color="Color.Primary">Search</Button>
    </Column>
</Row>

<Divider />

<DataGrid 
    TItem="GameModel" 
    Data="_games" 
    Responsive 
    Filterable FilterMethod="DataGridFilterMethod.Contains" 
    Sortable SortMode="DataGridSortMode.Multiple" 
    Resizable ResizeMode="TableResizeMode.Columns"
    ShowPager PageSize="10" ShowPageSizes PageSizes="@(new [] { 5, 10, 25, 50 })">
    <DataGridColumns>
        <DataGridColumn Field="@nameof(GameModel.Id)" Caption="#" Sortable="false" />
        <DataGridDateColumn Field="@nameof(GameModel.Created)" Caption="Created"/>
        <DataGridColumn Field="@nameof(GameModel.Stadium)" Caption="Stadium"/>
        <DataGridColumn Field="@nameof(GameModel.WinningTeam)" Caption="Winning Team" CustomFilter="PlayerNameFilter" Sortable="false">
            <DisplayTemplate>
                @{
                    @((context as GameModel)?.WinningTeam?.GetPlayerNames())
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(GameModel.LosingTeam)" Caption="Losing Team" CustomFilter="PlayerNameFilter" Sortable="false">
            <DisplayTemplate>
                @{
                    @((context as GameModel)?.LosingTeam?.GetPlayerNames())
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(GameModel.Red)" Caption="Red" CustomFilter="PlayerNameFilter" Sortable="false">
            <DisplayTemplate>
                @{
                    @((context as GameModel)?.Red.GetPlayerNames())
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(GameModel.Blue)" Caption="Blue" CustomFilter="PlayerNameFilter" Sortable="false">
            <DisplayTemplate>
                @{
                    @((context as GameModel)?.Blue.GetPlayerNames())
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(GameModel.State)" Caption="State"/>
        <DataGridColumn Field="@nameof(GameModel.Replay)" Caption="Save Replay" Sortable="false" Filterable="false">
            <DisplayTemplate>
                @{
                    if (!string.IsNullOrWhiteSpace(context?.Replay))
                    {
                        <Button Color="Color.Primary" Clicked="@(() => SaveReplay(context))"><Icon Name="IconName.Save"/></Button>
                    } else
                    {
                        <Tooltip Text="No replay available" Placement="TooltipPlacement.Right">
                            <Button Disabled Color="Color.Danger"><Icon Name="IconName.TimesCircle"/></Button>
                        </Tooltip>
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

@code {
    private GamesQueryModel QueryModel { get; } = new();
    private GameModel[] _games = Array.Empty<GameModel>();

    private bool PlayerNameFilter(object itemValue, object searchValue)
    {
        if (searchValue is string playerNames && itemValue is Team team)
        {
            return team.GetPlayerNames().Contains(playerNames);
        }

        return true;
    }

    private EventCallback SaveReplay(GameModel? model)
    {
        if (model is null || string.IsNullOrWhiteSpace(model.Replay))
        {
            NotificationService?.Warning("Cannot download replay", "Error");
        }
        else
        {
            JS.InvokeVoidAsync("saveAsFile", "replay.hbr2", model.Replay);
        }

        return EventCallback.Empty;
    }

    private async Task GetGames()
    {
        _games = GamesService.GetGames(QueryModel).OrderByDescending(game => game.Created).Select(game => new GameModel(game)).ToArray();
        if (!_games.Any()) await NotificationService?.Warning("Try changing your search criteria.", "No games found!")!;
    }
}
