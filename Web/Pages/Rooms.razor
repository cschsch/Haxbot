@page "/rooms"

<PageTitle>Rooms</PageTitle>

@using Haxbot.Entities
@using Haxbot.Settings
@using Web.Data
@inject Configuration BaseConfiguration
@inject GamesService GamesService
@inject RoomsService RoomsService
@inject INotificationService NotificationService
@inject IMessageService MessageService

<Heading Size="HeadingSize.Is1">Rooms</Heading>

<Paragraph>Create or join Haxball rooms. Creating a room requires a token, acquirable <Link href="https://www.haxball.com/headlesstoken" Target="Target.Blank">here</Link>.</Paragraph>

<Row Gutter="(32, 16)">
    <Column Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <Heading Size="HeadingSize.Is6">Room configuration</Heading>
        <Divider />
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is2">Name of room</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <TextEdit @bind-Text="_roomName"></TextEdit>
            </FieldBody>
        </Field>
        <Divider />
        <Check @bind-Checked="_public" TValue="bool">Make room public</Check>
        <Divider />
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3">Time limit in minutes</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is9">
                <NumericPicker @bind-Value="_timeLimit" TValue="int" Min="1" />
            </FieldBody>
        </Field>
        <Divider />
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3">Party Management</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is9">
                <Select TValue="PartyManagement" @bind-SelectedValue="@_partyManagement">
                    <SelectItem Value="PartyManagement.None">None</SelectItem>
                    <SelectItem Value="PartyManagement.Shuffle">Shuffle</SelectItem>
                    <SelectItem Value="PartyManagement.RoundRobin">Round Robin</SelectItem>
                </Select>
            </FieldBody>
        </Field>
        <Divider />
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is2">Room admins</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <Select TValue="string" Multiple @bind-SelectedValues="@_selectedAuths">
                    @foreach (var player in GamesService.GetPlayers().OrderBy(player => player.Name))
                    {
                        <SelectItem Value="player.Auth">@player.Name</SelectItem>
                    }
                </Select>
            </FieldBody>
        </Field>
        <Divider />
        <TextEdit @bind-Text="_password" Placeholder="Password"></TextEdit>
        <Divider />
        <TextEdit @bind-Text="_token" @onchange="(args => _buttonDisabled = string.IsNullOrWhiteSpace(args.Value as string))" Placeholder="Token"></TextEdit>
    </Column>
    <Column Margin="Margin.Is1">
        <Button Size="Size.Large" Disabled="_buttonDisabled" Position="Position.Absolute.Bottom.Is0.End.Is0" Clicked="@(() => NotificationService?.Info("Creating room...")!.ContinueWith(_ => CreateRoom())!)" Color="Color.Primary">Create</Button>
    </Column>
</Row>

<Divider />

<DataGrid TItem="Room"
          Data="RoomsService.Rooms"
          Responsive
          Filterable FilterMethod="DataGridFilterMethod.Contains"
          Sortable SortMode="DataGridSortMode.Single"
          Resizable ResizeMode="TableResizeMode.Columns">
    <DataGridColumns>
        <DataGridColumn Field="RoomConfiguration.RoomName" Caption="Name" />
        <DataGridColumn Field="RoomConfiguration.TimeLimit" Caption="Time limit" />
        <DataGridColumn Field="RoomConfiguration.PartyManagement" Caption="Party management" />
        <DataGridColumn Field="RoomConfiguration.Public" Caption="Public" Filterable="false">
            <DisplayTemplate>
                <Check Checked="@((context as Room)!.RoomConfiguration.Public)" Disabled/>
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="RoomConfiguration.Password" Caption="Password" Filterable="false">
            <DisplayTemplate>
                <Check Checked="@(!string.IsNullOrEmpty((context as Room)!.RoomConfiguration.Password))" Disabled />
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="Url" Caption="Url">
            <DisplayTemplate>
                <Link href="@((context as Room)!.Url)" Target="Target.Blank">@((context as Room)!.Url)</Link>
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

@code {
    private string _roomName = string.Empty;
    private bool _public;
    private int _timeLimit = 1;
    private PartyManagement _partyManagement;
    private IReadOnlyList<string> _selectedAuths = Array.Empty<string>();
    private string? _password;
    private string _token = string.Empty;
    private bool _buttonDisabled = true;

    protected override Task OnInitializedAsync()
    {
        _roomName = BaseConfiguration.RoomConfiguration.RoomName;
        _public = BaseConfiguration.RoomConfiguration.Public;
        _timeLimit = BaseConfiguration.RoomConfiguration.TimeLimit;
        _selectedAuths = BaseConfiguration.RoomAdmins;
        _partyManagement = BaseConfiguration.RoomConfiguration.PartyManagement;
        return base.OnInitializedAsync();
    }

    private async Task CreateRoom()
    {
        var roomConfiguration = BaseConfiguration.RoomConfiguration with
        {
            RoomName = _roomName,
            Password = string.IsNullOrWhiteSpace(_password) ? null : _password,
            Public = _public,
            TimeLimit = _timeLimit,
            PartyManagement = _partyManagement
        };
        var configuration = BaseConfiguration with
        {
            RoomAdmins = _selectedAuths.ToArray(),
            RoomConfiguration = roomConfiguration
        };

        string url;
        try
        {
            url = await RoomsService.CreateRoom(configuration, _token);
        } catch (Exception exc)
        {
            await MessageService.Error(exc.Message, "Failed to create room!");
            return;
        }
        await MessageService.Success(url, "Your room has successfully been created!");
    }
}
