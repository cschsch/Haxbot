@page "/tables"
@using Haxbot.Stats
@using Web.Data
@inject GamesService GamesService
@inject INotificationService NotificationService

<PageTitle>Tables</PageTitle>

<Heading Size="HeadingSize.Is1">Tables</Heading>

<Paragraph>Use this to filter previously played games and to display various stats taken from them in tables.</Paragraph>

<StatQueryFilter 
    QueryModel="QueryModel" 
    OnSearch="@((groupings) => NotificationService?.Info("Searching for games...")!.ContinueWith(_ => GetGames(groupings))!)" />

<Divider />

<DataGrid
    TItem="FlattenedGameStats"
    Data="_stats"
    Responsive
    Filterable FilterMethod="DataGridFilterMethod.Contains" 
    Sortable SortMode="DataGridSortMode.Multiple" 
    Resizable ResizeMode="TableResizeMode.Columns"
    ShowPager PageSize="10" ShowPageSizes PageSizes="@(new [] { 5, 10, 25, 50 })">
    <DataGridColumns>
        <DataGridColumn Field="@nameof(FlattenedGameStats.Identification)" Caption="Identification" />
        <DataGridColumn Field="@nameof(FlattenedGameStats.Stadium)" Caption="Stadium" SortField="Stadium.Name">
            <DisplayTemplate>
                @{
                    @((context as FlattenedGameStats)?.Stadium?.Name)
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridDateColumn Field="@nameof(FlattenedGameStats.Date)" Caption="Date" />
        <DataGridColumn Field="@nameof(FlattenedGameStats.AmountWon)" Caption="Won" />
        <DataGridColumn Field="@nameof(FlattenedGameStats.AmountLost)" Caption="Lost" />
        <DataGridColumn Field="@nameof(FlattenedGameStats.AmountPlayed)" Caption="Played" />
        <DataGridNumericColumn Field="@nameof(FlattenedGameStats.Winrate)" Caption="Winrate (%)" />
        <DataGridNumericColumn Field="@nameof(FlattenedGameStats.WinLoseRatio)" Caption="Win / Lose" />
    </DataGridColumns>
</DataGrid>

@code {
    private StatQueryModel QueryModel { get; } = new() 
    { 
        PossibleGroupings = new[] { Grouping.Stadium, Grouping.Day }.Concat(GroupingHelper.ResultGroupings).ToArray()
    };
    private FlattenedGameStats[] _stats = Array.Empty<FlattenedGameStats>();

    private async Task GetGames(IEnumerable<Grouping> groupings)
    {
        var games = GamesService.GetGames(QueryModel);
        if (!games.Any()) await NotificationService?.Warning("Try changing your search criteria.", "No games found!")!;
        var collector = GroupingHelper.GetCollector(groupings.ToArray());
        var grouped = GamesService.CollectStats(collector, games).ToArray();
        _stats = grouped;
    }
}