@page "/overview"

<PageTitle>Overview</PageTitle>

@using Haxbot.Entities
@using Web.Data
@inject GamesService GamesService
@inject INotificationService NotificationService

<Heading Size="HeadingSize.Is1">Overview</Heading>

<Paragraph>Use this to filter previously played games and to display various stats taken from them in graphs.</Paragraph>

<Row Gutter="(32, 16)">
    <Column Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <PlayerFilter QueryModel="QueryModel" />
    </Column>
    <Column Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <TimeFilter QueryModel="QueryModel" />
    </Column>
</Row>
<Row Gutter="(32, 16)" Margin="Margin.Is1.FromTop">
    <Column ColumnSize="ColumnSize.Is5" Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <MiscFilter QueryModel="QueryModel" />
    </Column>
    <Column ColumnSize="ColumnSize.Is5" Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <Heading Size="HeadingSize.Is6">Options for data aggregation</Heading>
        <Divider />
        <Check @bind-Checked="_groupByTeam">Group by teams instead of players</Check>
    </Column>
    <Column Margin="Margin.Is1">
        <Button Size="Size.Large" Position="Position.Absolute.Bottom.Is0.End.Is0" Clicked="@(() => NotificationService?.Info("Searching for games...", "Searching...")!.ContinueWith(_ => GetGames())!)" Color="Color.Primary">Aggregate</Button>
    </Column>
</Row>

<Divider />



@code {
    private GamesQueryModel QueryModel { get; } = new();
    private GameModel[] _games = Array.Empty<GameModel>();
    private bool _groupByTeam;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private async Task GetGames()
    {
        _games = GamesService.GetGames(QueryModel).OrderByDescending(game => game.Created).ToArray();
        if (!_games.Any()) await NotificationService?.Warning("Try changing your search criteria.", "No games found!")!;
    }
}