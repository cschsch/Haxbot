@page "/overview"

<PageTitle>Overview</PageTitle>

@using Haxbot.Entities
@using Haxbot.Stats
@using Web.Data
@inject GamesService GamesService
@inject INotificationService NotificationService

<Heading Size="HeadingSize.Is1">Overview</Heading>

<Paragraph>Use this to filter previously played games and to display various stats taken from them in graphs.</Paragraph>

<Row Gutter="(32, 16)">
    <Column Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <PlayerFilter QueryModel="QueryModel" />
    </Column>
    <Column Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <TimeFilter QueryModel="QueryModel" />
    </Column>
</Row>
<Row Gutter="(32, 16)" Margin="Margin.Is1.FromTop">
    <Column ColumnSize="ColumnSize.Is5" Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <MiscFilter QueryModel="QueryModel" />
    </Column>
    <Column ColumnSize="ColumnSize.Is5" Margin="Margin.Is1" Border="Border.Is1.Rounded">
        <Heading Size="HeadingSize.Is6">Options for data aggregation</Heading>
        <Divider />
        <Check @bind-Checked="_groupByTeam">Group by teams instead of players</Check>
    </Column>
    <Column Margin="Margin.Is1">
        <Button Size="Size.Large" Position="Position.Absolute.Bottom.Is0.End.Is0" Clicked="@(() => NotificationService?.Info("Searching for games...", "Searching...")!.ContinueWith(_ => GetGames())!)" Color="Color.Primary">Aggregate</Button>
    </Column>
</Row>

<Divider />

<LineChart @ref="_dateChart" TItem="FlattenedGameStats" Options="_dateChartOptions"></LineChart>

@code {
    private GamesQueryModel QueryModel { get; } = new();
    private FlattenedGameStats[] _stats = Array.Empty<FlattenedGameStats>();
    private bool _groupByTeam;

    private LineChart<FlattenedGameStats> _dateChart = new();
    private string _dateChartYAxisKey = nameof(FlattenedGameStats.Winrate);
    private LineChartOptions _dateChartOptions = new()
        {
            Parsing = new ChartParsing
            {
                XAxisKey = nameof(FlattenedGameStats.Date).ToLower()
            },
            Scales = new ChartScales
            {
                Y = new ChartAxis
                {
                    Title = new ChartScaleTitle
                    {
                        Display = true
                    }
                }
            }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await RedrawLineChart();
    }

    List<string> _lineChartColors = new List<string> 
    { 
        ChartColor.FromRgba( 0, 0, 128, 1f ), // navy
        ChartColor.FromRgba( 220, 20, 60, 1f ), // crimson
        ChartColor.FromRgba( 128, 128, 0, 1f ), // olive
        ChartColor.FromRgba( 0, 139, 139, 1f ), // darkcyan
        ChartColor.FromRgba( 139, 0, 139, 1f ), // darkmagenta
        ChartColor.FromRgba( 47, 79, 79, 1f ),  // darkslategray
        ChartColor.FromRgba( 255, 105, 180, 1f ), // hotpink
        ChartColor.FromRgba( 127, 255, 212, 1f ), // aquamarine
        ChartColor.FromRgba( 0, 100, 0, 1f ), // darkgreen
        ChartColor.FromRgba( 255, 215, 0, 1f ) // gold
    };

    private async Task RedrawLineChart()
    {
        await _dateChart.Clear();
        _dateChartOptions.Parsing.YAxisKey = _dateChartYAxisKey.ToCamelCase();
        _dateChartOptions.Scales.Y.Title.Text = _dateChartYAxisKey;
        var datasets = _stats
            .GroupBy(stat => stat.Identification)
            .Zip(_lineChartColors.Cycle())
            .Select(groupColors => new LineChartDataset<FlattenedGameStats>
                {
                    Label = groupColors.First.Key,
                    Data = groupColors.First.OrderBy(stat => stat.Date).Scan((acc, cur) => acc.Add(cur)).ToList(),
                    BackgroundColor = groupColors.Second,
                    BorderColor = groupColors.Second,
                    BorderWidth = 2,
                    CubicInterpolationMode = "default",
                    Fill = false
                }).ToArray();
        await _dateChart.AddDatasetsAndUpdate(datasets.ToArray());
    }

    private async Task GetGames()
    {
        var games = GamesService.GetGames(QueryModel);
        if (!games.Any()) await NotificationService?.Warning("Try changing your search criteria.", "No games found!")!;
        _stats = _groupByTeam 
            ? GamesService.CollectStats<TeamStatsCollector>(games).ToArray() 
            : GamesService.CollectStats<PlayerStatsCollector>(games).ToArray();
        await RedrawLineChart();
    }
}